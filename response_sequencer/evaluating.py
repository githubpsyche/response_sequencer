# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/06_Evaluating_Performance.ipynb.

# %% auto 0
__all__ = ['SegmenterEvaluator', 'JaccardScoreSegmenterEvaluator', 'MatcherEvaluator', 'SegmentMatcherEvaluator',
           'LevenshteinMatcherEvaluator', 'DatasetEvaluator', 'visualize_confidence_interval']

# %% ../notebooks/06_Evaluating_Performance.ipynb 3
from abc import ABC, abstractmethod
from typing import List, Dict

class SegmenterEvaluator(ABC):

    """
    Abstract base class for implementing an evaluator of Segmenter concrete classes. To create a custom SegmenterEvaluator, inherit from this class and override the compare method.
    """

    @abstractmethod
    def __call__(self, response_text: str, generated_units: List[Dict[str, object]], reference_units: List[Dict[str, object]]) -> float:
        """
        Identifies the sequence of target items generated in the input text.

        Parameters:
            response_text (str): The response text.
            generated_units List[Dict[str, object]]: The sequence of generated units.
            reference_units List[Dict[str, object]]: The sequence of reference units.

            Each unit is a dictionary with keys "text" and "spans":
            The "text" key corresponds to the text representation, 
            The "spans" key corresponds to a list of character-level start and end indices (tuples) in the reference text.

        Returns:
            float: The evaluation score.
        """
        pass

# %% ../notebooks/06_Evaluating_Performance.ipynb 5
from sklearn.metrics import jaccard_score
import numpy as np

class JaccardScoreSegmenterEvaluator(SegmenterEvaluator):

    def __call__(self, response_text: str, 
                 generated_units: List[Dict[str, object]], 
                 comparison_units: List[Dict[str, object]]) -> float:
        
        gen_labels = self._assign_labels(response_text, generated_units)
        comp_labels = self._assign_labels(response_text, comparison_units)
        return jaccard_score(comp_labels, gen_labels, average='samples')

    def _assign_labels(self, response_text: str, units) -> List[List[int]]:

        labels = np.zeros((len(units), len(response_text)), dtype=int)
        for i, unit in enumerate(units):
            for span in unit["spans"]:
                start, end = span
                labels[i, start:end] = 1

        return labels.tolist()

# %% ../notebooks/06_Evaluating_Performance.ipynb 10
class MatcherEvaluator(ABC):

    """
    Abstract base class for implementing an evaluator of Matcher concrete classes. To create a custom MatcherEvaluator, inherit from this class and override the compare method.
    """

    @abstractmethod
    def __call__(
        self, response_text: str, reference_units: List[Dict[str, object]], generated_units: List[Dict[str, object]], 
        reference_matching: List[str], generated_matching: List[str]) -> float:
        """
        Identifies the sequence of target items generated in the input text.

        Parameters:
            response_text (str): The response text.
            reference_units (List[Dict[str, object]]): List of reference response units
            generated_units (List[Dict[str, object]]): List of generated response_units

                Each reference and generated unit is a dictionary with keys "text" and "spans":
                The "text" key corresponds to the text representation, 
                The "spans" key corresponds to a list of character-level start and end indices (tuples) 
                in the input text.

            reference_matching (np.ndarray): matchings between target items and reference units
            generated_matching (np.ndarray): matchings between target items and generated units

            matchings are 2-D boolean numpy arrays of shape (len(target_items), len(units)) containing True 
            if the target item matches the reference or generated unit at the corresponding index.

        Returns:
            float: The evaluation score.
        """
        pass

# %% ../notebooks/06_Evaluating_Performance.ipynb 12
import numpy as np

class SegmentMatcherEvaluator(MatcherEvaluator):
    """
    Evaluates matchings by comparing for each target item the matched reference unit with the matched generated unit using a SegmenterEvaluator
    
    """

    def __init__(self, segmenter_evaluator: SegmenterEvaluator, only_matched: bool = False):
        """
        Parameters:
            segmenter_evaluator (SegmenterEvaluator): The SegmenterEvaluator to use for comparing the matched units
            only_matched (bool): If True, only target items with a matched reference unit are considered

            `segmenter_evaluator` should have a __call__ method with parameters (response_text, generated_units, reference_units) and return a float score
        """

        self.segmenter_evaluator = segmenter_evaluator
        self.only_matched = only_matched
        
    def __call__(
        self, response_text: str, reference_units: List[Dict[str, object]], generated_units: List[Dict[str, object]], 
        reference_matching: List[str], generated_matching: List[str]) -> float:
        """
        Identifies the sequence of target items generated in the input text.

        Parameters:
            response_text (str): The response text.
            reference_units (List[Dict[str, object]]): List of reference response units
            generated_units (List[Dict[str, object]]): List of generated response_units

                Each reference and generated unit is a dictionary with keys "text" and "spans":
                The "text" key corresponds to the text representation, 
                The "spans" key corresponds to a list of character-level start and end indices (tuples) 
                in the input text.

            reference_matching (np.ndarray): matchings between target items and reference units
            generated_matching (np.ndarray): matchings between target items and generated units

            matchings are 2-D boolean numpy arrays of shape (len(target_items), len(units)) containing True 
            if the target item matches the reference or generated unit at the corresponding index.

        Returns:
            float: The evaluation score.
        """

        if self.only_matched:
            valid_targets = np.any(reference_matching, axis=1)
            reference_matching = reference_matching[valid_targets]
            generated_matching = generated_matching[valid_targets]
            
        reference_units = [reference_units[i] for i in np.argmax(reference_matching, axis=1)]
        generated_units = [generated_units[i] for i in np.argmax(generated_matching, axis=1)]

        return self.segmenter_evaluator(response_text, generated_units, reference_units)

# %% ../notebooks/06_Evaluating_Performance.ipynb 16
from edist.sed import standard_sed

class LevenshteinMatcherEvaluator(MatcherEvaluator):
    """
    Uses Levenshtein distance between extracted target item sequences to measure performance
    """

    def __init__(self,only_matched: bool = False):
        """
        Parameters:
            only_matched (bool): If True, only target items with a matched reference unit are considered
        """

        self.only_matched = only_matched
        
    def __call__(
        self, response_text: str, reference_units: List[Dict[str, object]], generated_units: List[Dict[str, object]], 
        reference_matching: List[str], generated_matching: List[str]) -> float:
        """
        Identifies the sequence of target items generated in the input text.

        Parameters:
            response_text (str): The response text.
            reference_units (List[Dict[str, object]]): List of reference response units
            generated_units (List[Dict[str, object]]): List of generated response_units

                Each reference and generated unit is a dictionary with keys "text" and "spans":
                The "text" key corresponds to the text representation, 
                The "spans" key corresponds to a list of character-level start and end indices (tuples) 
                in the input text.

            reference_matching (np.ndarray): matchings between target items and reference units
            generated_matching (np.ndarray): matchings between target items and generated units

            matchings are 2-D boolean numpy arrays of shape (len(target_items), len(units)) containing True 
            if the target item matches the reference or generated unit at the corresponding index.

        Returns:
            float: The evaluation score.
        """

        if self.only_matched:
            valid_targets = np.any(reference_matching, axis=1)
            reference_matching = reference_matching[valid_targets]
            generated_matching = generated_matching[valid_targets]

        reference_recalled_targets = np.any(reference_matching, axis=1)
        generated_recalled_targets = np.any(generated_matching, axis=1)

        reference_matching = reference_matching[reference_recalled_targets]
        generated_matching = generated_matching[generated_recalled_targets]

        reference_units = [reference_units[i] for i in np.argmax(reference_matching, axis=1)]
        generated_units = [generated_units[i] for i in np.argmax(generated_matching, axis=1)]

        reference_sequence = np.where(reference_recalled_targets)[0].tolist()
        generated_sequence = np.where(generated_recalled_targets)[0].tolist()

        paired_reference = list(zip(reference_sequence, reference_units))
        paired_generated = list(zip(generated_sequence, generated_units))

        sorted_reference = sorted(paired_reference, key=lambda x: self._span_based_ordering(x[1]))
        sorted_generated = sorted(paired_generated, key=lambda x: self._span_based_ordering(x[1]))

        sorted_reference = [x[0] for x in sorted_reference]
        sorted_generated = [x[0] for x in sorted_generated]

        # print(sorted_reference, sorted_generated, standard_sed(sorted_reference, sorted_generated))
        return standard_sed(sorted_reference, sorted_generated)

    
    def _span_based_ordering(self, matched_response_unit):
        return (matched_response_unit['spans'][0][0], matched_response_unit['spans'][-1][1])        

# %% ../notebooks/06_Evaluating_Performance.ipynb 20
from torch.utils.data import Dataset
from .sequencing import Sequencer
from tqdm import tqdm

class DatasetEvaluator:
    """
    Evaluates matchings by comparing for each target item the matched reference unit with the matched generated unit using a SegmenterEvaluator
    
    """

    def __init__(self, matcher_evaluator: MatcherEvaluator, dataset: Dataset, sequencer: Sequencer, random: bool = True):
        """
        Parameters:
            matcher_evaluator (MatcherEvaluator): The evaluator comparing the matched reference and generated units
        """

        self.evaluator = matcher_evaluator
        self.dataset = dataset
        self.sequencer = sequencer
        self.random = random

    def __call__(self, samples: int = 0) -> List[float]:
        """
        Applies evaluation to a random sample of the dataset.

        Parameters:
            samples (int): The number of samples to evaluate. If 0, all samples are evaluated.

        Returns:
            List[float]: The evaluation scores.
        """

        if samples == 0:
            samples = len(self.dataset)

        if self.random:
            indices = np.random.choice(len(self.dataset), size=samples, replace=False)
        else:
            indices = np.arange(samples)

        scores = []
        for i in tqdm(indices):
            batch = self.dataset[i]
            response_text = batch['response_transcript']
            if not response_text:
                continue

            target_items = batch['target_items']
            reference_units = batch['response_units']
            if not reference_units:
                continue
            reference_matching = batch['matches']

            result = self.sequencer(response_text, target_items)
            generated_units = result['response_units']
            generated_matching = result['matches']

            scores.append(self.evaluator(
                response_text, reference_units, generated_units, reference_matching, generated_matching))

        return scores

# %% ../notebooks/06_Evaluating_Performance.ipynb 23
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats

def visualize_confidence_interval(samples, confidence_level=0.95):
    # Calculate the sample mean and standard error of the mean
    sample_mean = np.mean(samples)
    sample_sem = stats.sem(samples)
    
    # Calculate the degrees of freedom
    degrees_of_freedom = len(samples) - 1
    
    # Calculate the t-critical value for the specified confidence level
    t_critical = stats.t.ppf((1 + confidence_level) / 2, degrees_of_freedom)
    
    # Calculate the margin of error
    margin_of_error = t_critical * sample_sem
    
    # Calculate the lower and upper bounds of the confidence interval
    lower_bound = sample_mean - margin_of_error
    upper_bound = sample_mean + margin_of_error

    print(f'Confidence Level: {confidence_level*100:.1f}%')
    print(f'Sample Mean: {sample_mean:.3f}')
    print(f'Lower Bound: {lower_bound:.3f}')
    print(f'Upper Bound: {upper_bound:.3f}')
    

    # Plot the confidence interval
    plt.figure(figsize=(8, 6))
    plt.axhline(y=sample_mean, color='blue', linestyle='-', label='Sample Mean')
    plt.axhline(y=lower_bound, color='red', linestyle='--', label='Lower Bound')
    plt.axhline(y=upper_bound, color='green', linestyle='--', label='Upper Bound')
    plt.fill_betweenx([lower_bound, upper_bound], 0, 1, color='gray', alpha=0.3, label='Confidence Interval')
    plt.legend(loc='upper right')
    plt.xlim(0, 1)
    plt.xlabel('Samples')
    plt.ylabel('Value')
    plt.title(f'{confidence_level*100:.1f}% Confidence Interval')
    plt.show()
